source('helper_functions.R')
library(randomForest)
library(e1071)
library(caret)
library(ggplot2)
set.seed(123)
data = fetchAndCleanData()
data.backup = data
head(data)
summary(data) #no missing data appears
#Create data for training
sample.ind <- sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev <- data[sample.ind==1,]
data.val <- data[sample.ind==2,]
varNames = names(data.dev)
varNames = varNames[!varNames %in% c("Edible")]
rf.formula <- as.formula(paste("Edible",
paste(varNames,
collapse = "+"),
sep = " ~ "))
rf = randomForest(rf.formula,
ntree = 500,
data = data.dev)
plot(rf)
set.seed(123)
data = fetchAndCleanData()
data.backup = data
head(data)
summary(data) #no missing data appears
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.10,0.90))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
table(data$Edible)/nrow(data)
table(data.dev$Edible)/nrow(data.dev)
table(data.val$Edible)/nrow(data.val)
varNames = names(data.dev)
# Exclude Response variable
varNames = varNames[!varNames %in% c("Edible")]
# Add response variable and convert to a formula object
rf.formula <- as.formula(paste("Edible",
paste(varNames,
collapse = "+"),
sep = " ~ "))
rf = randomForest(rf.formula,
ntree = 500,
data = data.dev)
plot(rf)
print(rf)
set.seed(123)
data = fetchAndCleanData()
data.backup = data
head(data)
summary(data) #no missing data appears
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.10,0.90))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
table(data$Edible)/nrow(data)
table(data.dev$Edible)/nrow(data.dev)
table(data.val$Edible)/nrow(data.val)
varNames = names(data.dev)
# Exclude Response variable
varNames = varNames[!varNames %in% c("Edible")]
# Add response variable and convert to a formula object
rf.formula <- as.formula(paste("Edible",
paste(varNames,
collapse = "+"),
sep = " ~ "))
rf = randomForest(rf.formula,
ntree = 100,
data = data.dev)
plot(rf)
print(rf)
varImpPlot(rf,
sort = T,
main="Variable Importance")
help(varImpPlot)
varImpPlot(rf,
sort = T,
n.var=10,
main="Variable Importance")
varImpPlot(rf,
sort = T,
n.var=10,
main="Top 10 - Variable Importance")
var.imp <- data.frame(importance(rf,
type=2))
var.imp$Variables <- row.names(var.imp)
var.imp = data.frame(importance(rf,
type=2))
var.imp$Variables <- row.names(var.imp)
var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),]
p = ggplot(data,aes(x=SporePrintColor, y=Odor, color = Edible))
p + geom_jitter(alpha=.25)
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.50)
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.50)
p + geom_jitter(alpha=0.50) + scale_fill_manual(c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.50) + scale_fill_manual(c('darkgreen','red'))
p + geom_jitter(alpha=0.50) + scale_fill_manual(values=c('darkgreen','red'))
p + geom_jitter(alpha=0.50) + scale_fill_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.50) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.50)scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.50) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.50) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
rf = randomForest(Edible ~ .,
ntree = 100,
data = data.dev)
plot(rf)
data.dev$predicted.response <- predict(rf , data.dev)
## Loading required package: lattice
## Loading required package: ggplot2
# Create Confusion Matrix
confusionMatrix(data = data.dev$predicted.response,
reference = data.dev$Edible,
positive = 'Edible')
# Predicting response variable
data.val$predicted.response <- predict(rf ,data.val)
# Create Confusion Matrix
confusionMatrix(data=data.val$predicted.response,
reference=data.val$Edible,
positive='Edible')
source('helper_functions.R')
library(randomForest)
library(e1071)
library(caret)
library(ggplot2)
set.seed(123)
data = fetchAndCleanData()
data.backup = data
head(data)
summary(data) #no missing data appears
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
table(data$Edible)/nrow(data)
table(data.dev$Edible)/nrow(data.dev)
table(data.val$Edible)/nrow(data.val)
rf = randomForest(Edible ~ .,
ntree = 100,
data = data.dev)
plot(rf)
print(rf)
varImpPlot(rf,
sort = T,
n.var=10,
main="Top 10 - Variable Importance")
#Looks like Odor is the greatest indicator
var.imp = data.frame(importance(rf,
type=2))
# make row names as columns
var.imp$Variables <- row.names(var.imp)
var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),]
#Odor and SporePrintColor are the best predictors
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
# Predicting response variable
data.dev$predicted.response <- predict(rf , data.dev)
## Loading required package: lattice
## Loading required package: ggplot2
# Create Confusion Matrix
confusionMatrix(data = data.dev$predicted.response,
reference = data.dev$Edible,
positive = 'Edible')
# Predicting response variable
data.val$predicted.response <- predict(rf ,data.val)
# Create Confusion Matrix
confusionMatrix(data=data.val$predicted.response,
reference=data.val$Edible,
positive='Edible')
head(data)
plot(data)
p = ggplot(data,aes(x=CapShape, y=CapSurface, color=Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=CapShape, y=CapSurface, color=Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.2) #+ scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
head(data)
p + geom_scatter()
p + geom_point()
p = ggplot(data,aes(x=CapShape, y=CapSurface, color=Edible))
p + geom_jitter(alpha=0.2) #+ scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.3) #+ scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.5) #+ scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.5) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
head(data)
p = ggplot(data,aes(x=GillSize, y=StalkRoot, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=StalkColorBelowRing, y=StalkColorAboveRing, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Odor, y=SporePrintColor, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
source('helper_functions.R')
library(randomForest)
library(e1071)
library(caret)
library(ggplot2)
set.seed(123)
#Import Data via Custom Function
data = fetchAndCleanData()
head(data)
summary(data) #no missing data appears
print(head(data))
#Odor and SporePrintColor are the best predictors
p = ggplot(data,aes(x=CapShape, y=CapSurface, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=StalkColorBelowRing, y=StalkColorAboveRing, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Odor, y=SporePrintColor, color=Edible))
p + geom_jitter(alpha=0.3) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=Odor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
p = ggplot(data,aes(x=Edible, y=SporePrintColor, color = Edible))
p + geom_jitter(alpha=0.2) + scale_color_manual(breaks = c('Edible','Poisonous'),values=c('darkgreen','red'))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print(table(data$Edible)/nrow(data))
print(table(data.dev$Edible)/nrow(data.dev))
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print('Original Data')
print(table(data$Edible)/nrow(data))
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print('Original Data\n')
print(table(data$Edible)/nrow(data))
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print('Original Data')
print(table(data$Edible)/nrow(data))
print("\n")
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print('Original Data')
print(table(data$Edible)/nrow(data))
print("/n")
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print('Original Data')
print(table(data$Edible)/nrow(data))
print(" ")
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print(" ---------------------- ")
print('Original Data')
print(table(data$Edible)/nrow(data))
print(" ---------------------- ")
print(" ---------------------- ")
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print(" ---------------------- ")
print(" ---------------------- ")
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
print(" ---------------------- ")
#Create data for training
sample.ind = sample(2,
nrow(data),
replace = T,
prob = c(0.05,0.95))
data.dev = data[sample.ind==1,]
data.val = data[sample.ind==2,]
#See how data sets look as edible vs poisonous
print(" ---------------------- ")
print('Original Data')
print(table(data$Edible)/nrow(data))
print(" ---------------------- ")
print('Training Data')
print(table(data.dev$Edible)/nrow(data.dev))
print(" ---------------------- ")
print('Testing Data')
print(table(data.val$Edible)/nrow(data.val))
#Fit Random Forest Model
rf = randomForest(Edible ~ .,
ntree = 100,
data = data.dev)
plot(rf)
print(rf)
# Variable Importance
varImpPlot(rf,
sort = T,
n.var=10,
main="Top 10 - Variable Importance")
var.imp = data.frame(importance(rf,
type=2))
var.imp$Variables <- row.names(var.imp)
var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),]
#Variable Importance
var.imp = data.frame(importance(rf,
type=2))
# make row names as columns
var.imp$Variables = row.names(var.imp)
print(var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),])
#Variable Importance
var.imp = data.frame(importance(rf,
type=2))
# make row names as columns
var.imp$Variables = row.names(var.imp)
print(var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),])
# Predicting response variable
data.dev$predicted.response = predict(rf , data.dev)
# Predicting response variable
data.dev$predicted.response = predict(rf , data.dev)
# Create Confusion Matrix
confusionMatrix(data = data.dev$predicted.response,
reference = data.dev$Edible,
positive = 'Edible')
# Predicting response variable
data.dev$predicted.response = predict(rf , data.dev)
# Create Confusion Matrix
print(
confusionMatrix(data = data.dev$predicted.response,
reference = data.dev$Edible,
positive = 'Edible'))
# Predicting response variable
data.val$predicted.response <- predict(rf ,data.val)
# Create Confusion Matrix
print(
confusionMatrix(data=data.val$predicted.response,
reference=data.val$Edible,
positive='Edible'))
ncol(data)
